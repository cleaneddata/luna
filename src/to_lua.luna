
local to_lua = {}

local LUAFN_ASSERT = "__L_as"
local LUAFN_TYPE = "__L_t"

function to_lua.isNode(o)
	return type(o) == "table" and not not o.type
end

-- the last line this node appears on
function to_lua.getNodeLastLine(n)
	local s = n.line
	if not s then return -1 end

	local l = s
	for k,v ofi n do
		if to_lua.isNode(v) then
			l = math.max(l, to_lua.getNodeLastLine(v))
		end
	end
	return l
end

function to_lua.isParentOf(par, node)
	if par == node then return true end
	for k,v ofi par do
		if v == node or (to_lua.isNode(v) and to_lua.isParentOf(v, node)) then return true end
	end
	return false
end

-- Gets the linenumber difference between these two nodes
-- Returns nil if it cannot/shouldn't be derived from these nodes
function to_lua.getLinenoDiff(node1, node2)
	local line1, line2

	if type(node1) == "number" then
		line1 = node1
	else
		line1 = to_lua.getNodeLastLine(node1)
	end

	line2 = node2.line

	if not line1 or not line2 then
		return nil
	end

	return line2 - line1
end

-- Processes parlist/funcbody adding eg. type checks if needed 
function to_lua.processParListFuncBlock(parlist: lunanode, funcbody: lunanode)
	local paramextras = {}
	for par ofi parlist do
		local name, type, value
		if par.type == "paramwithvalue" then
			name, type = par[1][1], par[1][2]
			value = par[2]
		else
			name, type = par[1], par[2]
		end

		if type or value then
			local pex = {var = name.text}

			if type then
				pex.type = type
			end
			if value then
				pex.value = value
			end

			table.insert(paramextras, pex)
		end
	end

	for i,tc of paramextras do
		local {var, type, value} = tc

		if type then
			local nc = parlist:newCreator()

			local tcnode = nc.funccall(
				LUAFN_ASSERT,
				nc.explist(
					nc.typecheck(var, type),
					nc.literal({text = [["Invalid value for ']] .. var .. [['. Expected a ']] .. type[1].text .. [['"]] })
				)
			)

			table.insert(funcbody, i, tcnode)
		end

		if value then
			local nc = parlist:newCreator()

			local as = nc.assignment(nc.t_assignop({text = "||="}), nc.varlist(var), nc.explist(value))
			
			table.insert(funcbody, i, as)
		end
	end

	return parlist, funcbody
end

local luaBuffer = {}
luaBuffer.__index = luaBuffer
luaBuffer.__type = "luabuf"

function luaBuffer.new(indentString, nlString, noExtraSpace)
	return setmetatable({
		buf = {},
		indent = 0,
		indentString = indentString,
		nlString = nlString,
		noExtraSpace = noExtraSpace,

		line = 1
	}, luaBuffer)
end
function luaBuffer:appendln(t)
	self:append(t)
	self:nl()
end
function luaBuffer:append(t)
	if not self.hasIndented then
		self.buf[#self.buf + 1] = self.indentString:rep(self.indent)
		self.hasIndented = true
	end
	self.buf[#self.buf + 1] = t
end
function luaBuffer:nl()
	self.buf[#self.buf + 1] = self.nlString
	self.line += 1
	self.hasIndented = false
end
function luaBuffer:nlIndent()
	self:nl()
	self.indent += 1
end
function luaBuffer:nlUnindent()
	self:nl()
	self.indent -= 1
end

function luaBuffer:getTmpIndexAndIncrement()
	self._tmpIndex = (self._tmpIndex or -1) + 1
	return self._tmpIndex
end

-- Appends optional space. This might nop depending on the options 
function luaBuffer:appendSpace(t: string)
	if not self.noExtraSpace then
		self:append(t)
	end
end

-- makes sure that last node in luabuffer matches given pattern
function luaBuffer:checkLastNode(pattern: string)
	if local ln = self.buf[#self.buf] then
		return not not ln:match(pattern)
	end
end

function luaBuffer:tostring()
	return table.concat(self.buf, "")
end

local luafier = {}
luafier.__index = luafier
luafier.__type = "luafier"

function luafier.new(buf: luabuf, opts: table)
	return setmetatable({
		buf = buf,
		opts = opts
	}, luafier)
end

function luafier:getLinenoDiff(node1, node2)
	if self.opts.matchLinenumbers then
		return to_lua.getLinenoDiff(node1, node2)
	end
end

-- Adds indentation+nl/spaces around given block based on options
-- n1 is preceding node
-- n2 is the block node
-- fn is the function that adds internal contents
function luafier:wrapIndent(n1, n2, fn, alsoIfPrettyPrint)
	local lndiff = self:getLinenoDiff(n1, n2)
	local addNl = lndiff or ((alsoIfPrettyPrint and self.opts.prettyPrint) and 1) or 0

	if addNl > 0 then
		self.buf:nlIndent()
		for i=1,addNl-1 do self.buf:nl() end
	else
		self.buf:append(" ")
	end

	fn()

	if addNl > 0 then
		self.buf:nlUnindent()
	else
		self.buf:append(" ")
	end
end

-- Writes the part of code that fetches given library from where-ever
-- On vanilla Lua this part would write "require(",libliteral,")"
function luafier:writeImportGetterImpl(libliteral)
	self.buf:append("require("); self:writeNode(libliteral); self.buf:append(")")
end

function luafier:writeList(list: lunanode)
	local lastnode
	for i,snode ofi list do
		if i > 1 then self.buf:append(","); self.buf:appendSpace(" ") end

		local lndiff = self.opts.matchLinenumbers and lastnode and to_lua.getLinenoDiff(lastnode, snode)
		lastnode = snode
		if lndiff and lndiff > 0 then
			for i=1, lndiff do self.buf:nl() end
		end

		self:writeNode(snode)
	end
end

function luafier:writeNode(node: lunanode)
	local {opts, buf} = self

	-- START BACKWARD COMPAT
	local toLua = self::writeNode
	local listToLua = self::writeList
	local getLinenoDiff = self::getLinenoDiff
	local wrapIndent = self::wrapIndent
	-- END BACKWARD COMPAT

	if node.type == "block" then
		local prevnode
		for i,snode ofi node do

			local lndiff = getLinenoDiff(buf.line, snode)
			if lndiff then
				if lndiff > 0 then
					for i=1,lndiff do buf:nl() end
				elseif lndiff == 0 then
					-- add newlines before all except first node if we're not ahead of ourselves
					if i > 1 then buf:nl() end
				end
			elseif opts.prettyPrint then
				-- add newlines before all except first node if we're prettyprinting
				if i > 1 then buf:nl() end
			end

			-- Add semicolon if there is something on line and there is no space/semicolon
			if buf.hasIndented and buf:checkLastNode("[^%s;]$") then
				buf:append(";")
			end

			toLua(snode)

			prevnode = snode
		end

	elseif node.type == "local" then
		buf:append("local ")
		toLua(node[1])
		if node[2] then -- has explist
			buf:appendSpace(" "); buf:append("="); buf:appendSpace(" ")
			toLua(node[2])
		end
		
	elseif node.type == "localdestructor" then
		self:writeLocalDestructorNode(node)

	elseif node.type == "funcname" then
		local methodOffset = node.isMethod and -1 or 0
		for i = 1, #node + methodOffset do
			if i > 1 then buf:append(".") end
			toLua(node[i])
		end

		if node.isMethod then
			buf:append(":")
			toLua(node[#node])
		end
	elseif node.type == "localfunc" then
		buf:append("local function ")
		toLua(node[1])
		toLua(node[2])

	elseif node.type == "globalfunc" then
		buf:append("function ")
		toLua(node[1])
		toLua(node[2])

	elseif node.type == "func" then
		buf:append("function ")
		toLua(node[1])

	elseif node.type == "sfunc" or node.type == "funcbody" then
		local pl, fb = to_lua.processParListFuncBlock(node[1], node[2])

		if node.type == "sfunc" then
			buf:append("function(")
		else
			buf:append("(")
		end
		listToLua(pl)
		buf:append(")")

		wrapIndent(pl, fb, function() toLua(fb) end, true)

		buf:append("end")
	elseif node.type == "assignment" then
		local [opnode, vars, exps] = node
		local op = opnode.text

		if op == "=" then
			toLua(vars); buf:append(" = "); toLua(exps)
		elseif op == "||=" then
			assert(#vars == 1 and #exps == 1, "falsey assignment only works on single variable assignments")

			local nc = node:newCreator()
			local falseyAssign = nc["if"](
				nc.unop(nc.t_unop({text = "not"}), vars[1]),
				nc.block(
					nc.assignment(nc.t_assignop({text = "="}), vars, exps)
				)
			)

			self:writeNode(falseyAssign)
		else
			assert(#exps == 1, "mod assignment only works on 1-long explists currently")

			-- what kind of modification to do
			local modop = op:sub(1, 1)
			
			toLua(vars); buf:append(" = "); toLua(vars); buf:append(" "); buf:append(modop); buf:append(" ("); toLua(exps); buf:append(")")
		end
	elseif node.type == "funccall" then
		toLua(node[1]); buf:append("("); toLua(node[2]); buf:append(")")
	elseif node.type == "methodcall" then
		toLua(node[1]); buf:append(":"); toLua(node[2]); buf:append("("); toLua(node[3]); buf:append(")")

	elseif node.type == "args" or node.type == "fieldlist" or node.type == "parlist" or node.type == "typednamelist" or node.type == "varlist" or node.type == "explist" then
		listToLua(node)
		
	elseif node.type == "typedname" then
		toLua(node[1])
	elseif node.type == "paramwithvalue" then
		toLua(node[1])

	elseif node.type == "return" then
		buf:append("return")
		if local stat = node[1] then
			buf:append(" ")
			toLua(stat)
		end

	elseif node.type == "returnif" then
		local nif = node:cloneMeta("if")
		
		-- copy condition from returnif to if
		nif[1] = node[2]

		-- create return statement with returnif contents
		local ncond = node:cloneMeta("return")
		ncond[1] = node[1]
		nif[2] = ncond
		
		toLua(nif)

	elseif node.type == "break" then
		buf:append("break")

	elseif node.type == "index" then
		toLua(node[1]); buf:append("."); toLua(node[2])
	elseif node.type == "indexsafe" then
		buf:append("("); toLua(node[1]); buf:append(" and "); toLua(node[1]); buf:append("."); toLua(node[2]); buf:append(")")
	elseif node.type == "indexb" then
		toLua(node[1]); buf:append("["); toLua(node[2]); buf:append("]")

	elseif node.type == "tableconstructor" then
		buf:append("{");

		-- returns either first field of fieldlist or fieldlist itself
		local firstField = node[1][1] or node[1]

		-- need to use .line here, otherwise it gets the last line which doesn't work because firstField is child of node
		wrapIndent(node.line, firstField, function() toLua(node[1]) end)
		
		buf:append("}")
		
	elseif node.type == "field" then
		local [key, val] = node
		if key then
			if key.type == "identifier" then
				toLua(key)
			else
				buf:append("["); toLua(key); buf:append("]")
			end
			buf:appendSpace(" "); buf:append("="); buf:appendSpace(" "); toLua(val)
		else
			toLua(val)
		end

	elseif node.type == "ifassign" then
		local nc = node:newCreator()
		
		-- Create a temporary variable name for the variable to be assigned before the if
		local origAssignedVarName = node[1][1][1][1].text -- ohgod
		local varName = "__ifa" .. buf:getTmpIndexAndIncrement() .. "_" .. origAssignedVarName

		-- Set the assignment variable name to generated name
		node[1][1][1][1].text = varName

		-- Create a new if block that checks if varName is trueish
		local checkerIf = nc["if"](varName, node[2], node[3])

		-- Create a new local binding to restore the old name within the if scope and set it as the first code within if
		local restoreBinding = nc["local"](nc.varlist(nc.typedname(origAssignedVarName)), nc.explist(varName))
		table.insert(checkerIf[2], 1, restoreBinding)

		toLua(node[1]); buf:append("; ") toLua(checkerIf)

	elseif node.type == "if" or node.type == "elseif" then
		buf:append(node.type); buf:append(" "); toLua(node[1]); buf:append(" then");
		
		wrapIndent(node, node[2], function()
			toLua(node[2])
		end, true)

		if node[3] then
			toLua(node[3])
		else
			buf:append("end")
		end
	elseif node.type == "else" then
		buf:append("else");
		wrapIndent(node, node[1], function()
			toLua(node[1])
		end, true)
		buf:append("end")

	elseif node.type == "while" then
		buf:append("while "); toLua(node[1]); buf:append(" do");
		wrapIndent(node, node[2], function()
			toLua(node[2])
		end, true)
		buf:append("end")
	elseif node.type == "repeat" then
		buf:append("repeat");
		wrapIndent(node, node[1], function()
			toLua(node[1])
		end, true)
		buf:append("until "); toLua(node[2])

	elseif node.type == "fornum" then
		local [var, low, high, step, b] = node
		buf:append("for "); toLua(var); buf:appendSpace(" "); buf:append("="); buf:appendSpace(" "); toLua(low); buf:append(","); buf:appendSpace(" "); toLua(high)
		if step then
			buf:append(","); buf:appendSpace(" ")
			toLua(step)
		end
		buf:append(" do");
		wrapIndent(var, b, function()
			toLua(b)
		end, true)
		buf:append("end")
	elseif node.type == "forgen" then
		local [names, iter, b] = node
		buf:append("for "); toLua(names); buf:append(" in "); toLua(iter); buf:append(" do");
		wrapIndent(iter, b, function()
			toLua(b)
		end, true)
		buf:append("end")
	elseif node.type == "forof" then
		self:writeForOfNode(node)

	elseif node.type == "methodref" then
		buf:append("(function(...) return ");
		toLua(node[1]); buf:append(":"); toLua(node[2]); buf:append("(...)")
		buf:append(" end)")

	elseif node.type == "match" then
		self:writeMatchNode(node)

	elseif node.type == "binop" then
		local textualNode = node[1].text == "and" or node[1].text == "or"

		toLua(node[2]);
		if textualNode then buf:append(" ") else buf:appendSpace(" ") end 
		buf:append(node[1].text);
		
		local lndiff = getLinenoDiff(node[2], node[3])

		if lndiff and lndiff > 0 then
			for i=1,lndiff do buf:nl() end
		else
			if textualNode then buf:append(" ") else buf:appendSpace(" ") end 
		end
		toLua(node[3])

	elseif node.type == "unop" then
		local op = node[1].text
		buf:append(op)
		if op == "not" then
			buf:append(" ")
		end
		toLua(node[2])

	elseif node.type == "typecheck" then
		local [var, type] = node

		if type.isOptional then
			self:writeNode(node[1])
			buf:append("==nil or ")
		end

		buf:append(LUAFN_TYPE); buf:append("("); self:writeNode(var); buf:append(")==\""); buf:append(type[1].text); buf:append("\"")

	elseif node.type == "import" then
		local [binding, lib] = node

		buf:append("local "); self:writeNode(binding); buf:append(" = "); self:writeImportGetterImpl(lib)

	elseif node.type == "parexp" then
		buf:append("("); toLua(node[1]); buf:append(")")

	elseif node.type == "identifier" or node.type == "keyword" then
		buf:append(node.text)
		
	elseif node.type == "literal" then
		buf:append(node.text)

	elseif node.type == "number" then
		buf:append(node.text)

	elseif node.type == "varargs" then
		buf:append("...")

	else
		error("unhandled ast node " .. node.type)
	end
end

function luafier:writeForOfNode(node: lunanode)
	assert(node.type == "forof")
	local {buf} = self

	local [var, iter, b] = node

	-- target collection can be nil, so we need to wrap the whole loop in an if
	if node.nillableColl then
		local nc = node:newCreator()

		-- create new variable for the collection; otherwise we might eval something twice
		local varName = "__lcoll" .. buf:getTmpIndexAndIncrement()
		self:writeNode(nc["local"](nc.varlist(nc.typedname(varName)), nc.explist(iter))) buf:append(";")

		-- clone node and remove nillable flag, otherwise this block is called again
		local node2 = node:clone()
		node2.nillableColl = false

		-- modify the new for node's iterator to point to our newly made variable
		node2[2] = nc.identifier({text = varName})

		local nif = nc["if"](
			varName,
			node2
		)
		self:writeNode(nif)

		return
	end

	local [vark, varv] = var

	local destr
	if varv.type == "tabledestructor" or varv.type == "arraydestructor" then
		local varName = "__ldestr" .. buf:getTmpIndexAndIncrement()

		-- create a new identifier that will replace destructor
		local newVarv = varv:cloneMeta("identifier")
		newVarv.text = varName

		-- create a local destructor that targets newly named variable
		destr = varv:cloneMeta("localdestructor")
		destr[1] = varv
		destr[2] = newVarv

		varv = newVarv
	end

	buf:append("for ")
	if vark then
		self:writeNode(vark)
	else
		buf:append("_")
	end
	buf:append(","); buf:appendSpace(" "); self:writeNode(varv); buf:append(" in ")
	if node.iterArray then
		buf:append("ipairs")
	else
		buf:append("pairs")
	end
	buf:append("("); self:writeNode(iter); buf:append(") do")

	self:wrapIndent(iter, b, function()
		if destr then self:writeNode(destr) end
		self:writeNode(b)
	end, true)
	buf:append("end")
end

function luafier:writeLocalDestructorNode(node: lunanode)
	assert(node.type == "localdestructor")
	local {buf} = self

	local [destructor, target] = node
	local names = destructor[1]

	-- if target is not a simple identifier, create a tmp var for it
	local varName
	if target.type == "identifier" then
		varName = target.text
	else
		varName = "__ldestr" .. buf:getTmpIndexAndIncrement()
		buf:append("local "); buf:append(varName); buf:append("="); self:writeNode(target); buf:append(";")
	end

	-- add assert to check we're not trying to destructure nil
	buf:append(LUAFN_ASSERT); buf:append("("); buf:append(varName); buf:append(", \"cannot destructure nil\");")

	buf:append("local ")
	for i,name ofi names do
		if i > 1 then buf:append(", ") end
		self:writeNode(name)
	end
	buf:append(" = ")

	if destructor.type == "arraydestructor" then
		for i = 1, #names do
			if i > 1 then buf:append(", ") end
			buf:append(varName); buf:append("["); buf:append(tostring(i)); buf:append("]")
		end
	elseif destructor.type == "tabledestructor" then
		for i,member ofi names do
			if i > 1 then buf:append(", ") end
			buf:append(varName); buf:append("."); self:writeNode(member)
		end
	end
end

function luafier:writeMatchNode(node: lunanode)
	assert(node.type == "match")
	local {buf} = self

	local nc = node:newCreator()

	local varName = "__lmatch" .. buf:getTmpIndexAndIncrement()
	self:writeNode(nc["local"](nc.varlist(nc.typedname(varName)), nc.explist(node[1]))) buf:append(";")

	local mainif
	local curif

	local mapCond = (cond, prependNodes) => do
		if cond.type == "identifier" and cond.text == "_" then
			return nc.keyword({text = "true"})
		elseif cond.type == "typedname" then
			local [name, type] = cond
			
			-- prepend local assigning match var to new var binding
			table.insert(prependNodes, nc["local"](nc.varlist(name), nc.explist(nc.identifier({text = varName}))))

			if type then
				-- needs to refer to match var name; new binding is not available here
				return nc.typecheck(varName, nc.type(cond[2][1].text))
			else
				return nc.keyword({text = "true"})
			end

		elseif cond.type == "range" then
			local [low, high] = cond
			low = low and nc.binop(nc.t_binop({text = ">="}), varName, low)
			high = high and nc.binop(nc.t_binop({text = "<"}), varName, high)

			local e
			if low and high then
				e = nc.binop(nc.t_binop({text = "and"}), low, high)
			elseif low then
				e = low
			else
				e = high
			end

			return nc.binop(nc.t_binop({text = "and"}),
				nc.binop(nc.t_binop({text = "=="}), nc.funccall("type", nc.args(nc.explist(varName))), nc.literal({text = "\"number\""})),
				e)
		else
			return nc.binop(nc.t_binop({text = "=="}), varName, cond)
		end
	end

	for [cond, ifcond, body] ofi node[2] do
		local prependNodes = {}

		local condNode = mapCond(cond, prependNodes)

		local blockBody = nc.block()
		for n of prependNodes do
			table.insert(blockBody, n)
		end
		table.insert(blockBody, body)

		if ifcond then
			
			-- If there exists both a match arm if and re-binding of var, we need to do some magic
			-- to make it so the new binding is available to the match-if
			-- We do it by visiting identifiers that refer to new-bound name and renaming those to refer to
			-- match identifier
			if cond.type == "typedname" then
				local armBindingName = cond[1].text

				local function renameRecursive(node)
					if node.type == "identifier" and node.text == armBindingName then
						node.text = varName
					else
						for n ofi node do
							renameRecursive(n)
						end
					end
				end
				renameRecursive(ifcond)
			end

			condNode = nc.binop(nc.t_binop({text = "and"}), condNode, ifcond)
		end

		if curif then
			local n = nc["elseif"](condNode, nc.block(blockBody))
			curif[3] = n
			curif = n
		else
			mainif = nc["if"](condNode, nc.block(blockBody))
			curif = mainif
		end
	end

	if mainif then
		self:writeNode(mainif)
	end
end

function luafier:getLua()
	return self.buf:tostring()
end

local defopts = {
	-- attempts to create Lua that has same statements on same line numbers as source file
	matchLinenumbers = true,

	-- Tries to create as readable Lua as possible. If enabled alongside matchLinenumbers, it will be preferred over this option in stylistic decisions.
	prettyPrint = true,
	
	-- the indentation character (or string) that will be equal to one level of indentation in the output code
	indentString = "\t",

	-- the newline character that will be used for newlines in the output code
	nlString = "\n",

	-- the method to be called on module imports
	-- this function will be called with arguments (luafierInstance, libLiteralNode) and should append to buffer implementation for loading that library
	moduleImportImpl = nil,

	-- should the method defining needed Luna functions be writted to output file
	writeHeader = true
}

-- The code that is added as first thing in all Luafied files
to_lua.lunaHeader = 
[[local ]] .. LUAFN_ASSERT .. [[,__L_to,__L_gmt=assert,type,getmetatable;]] ..
[[local function ]] .. LUAFN_TYPE .. [[(o)local t=__L_to(o) if t=="table" then local mt = __L_gmt(o)return (mt and mt.__type) or t end return t end]]

function to_lua.toLua(node, useropts)
	local opts = {}

	for k,v of defopts do opts[k] = v end
	for k,v of? useropts do opts[k] = v end

	local bufIndentString = opts.prettyPrint and opts.indentString or ""

	local buf = luaBuffer.new(bufIndentString, opts.nlString, not opts.prettyPrint)
	if opts.writeHeader then buf:append(to_lua.lunaHeader); buf:append(";") end

	local l = luafier.new(buf, opts)
	if opts.moduleImportImpl then l.writeImportGetterImpl = opts.moduleImportImpl end
	l:writeNode(node)
	return l:getLua()
end

return to_lua