
local luafier = {}

local LUAFN_ASSERT = "__L_as"
local LUAFN_TYPE = "__L_t"

function luafier.isNode(o)
	return type(o) == "table" and not not o.type
end

-- the last line this node appears on
function luafier.getNodeLastLine(n)
	local s = n.line
	if not s then return -1 end

	local l = s
	for k,v ofi n do
		if luafier.isNode(v) then
			l = math.max(l, luafier.getNodeLastLine(v))
		end
	end
	return l
end

function luafier.isParentOf(par, node)
	if par == node then return true end
	for k,v ofi par do
		if v == node or (luafier.isNode(v) and luafier.isParentOf(v, node)) then return true end
	end
	return false
end

-- Gets the linenumber difference between these two nodes
-- Returns nil if it cannot/shouldn't be derived from these nodes
function luafier.getLinenoDiff(node1, node2)
	local line1, line2

	if type(node1) == "number" then
		line1 = node1
	else
		line1 = luafier.getNodeLastLine(node1)
	end

	line2 = node2.line

	if not line1 or not line2 then
		return nil
	end

	return line2 - line1
end

function luafier.listToLua(list, opts, buf: luabuf)
	local lastnode
	for i,snode ofi list do
		if i > 1 then buf:append(", ") end

		local lndiff = opts.matchLinenumbers and lastnode and luafier.getLinenoDiff(lastnode, snode)
		lastnode = snode
		if lndiff and lndiff > 0 then
			for i=1, lndiff do buf:nl() end
		end

		luafier.internalToLua(snode, opts, buf)
	end
end

-- Processes parlist/funcbody adding eg. type checks if needed 
function luafier.processParListFuncBlock(parlist: lunanode, funcbody: lunanode)
	local paramextras = {}
	for par ofi parlist do
		local name, type, value
		if par.type == "paramwithvalue" then
			name, type = par[1][1], par[1][2]
			value = par[2]
		else
			name, type = par[1], par[2]
		end

		if type or value then
			local pex = {var = name.text}

			if type then
				pex.type = type[1].text
				pex.nillable = type.isOptional
			end
			if value then
				pex.value = value
			end

			table.insert(paramextras, pex)
		end
	end

	for i,tc of paramextras do
		local {var, type, nillable, value} = tc

		if type then
			local tcnode = parlist:cloneMeta("funccall")
			tcnode[1] = tcnode:cloneMeta("identifier", { text = LUAFN_ASSERT })
			local args = tcnode:cloneMeta("explist")
			tcnode[2] = args

			local typeChecker = parlist:cloneMeta("binop", {
				parlist:cloneMeta("t_binop", { text = "==" }),
				parlist:cloneMeta("funccall", { parlist:cloneMeta("identifier", { text = LUAFN_TYPE }), parlist:cloneMeta("identifier", { text = var }) }),
				parlist:cloneMeta("literal", { text = "\"" .. type .. "\"" })
			})
			if nillable then
				local nilChecker = parlist:cloneMeta("binop", {
					parlist:cloneMeta("t_binop", { text = "==" }),
					parlist:cloneMeta("identifier", { text = var }),
					parlist:cloneMeta("keyword", { text = "nil" })
				})
				args[1] = parlist:cloneMeta("binop", {parlist:cloneMeta("t_binop", { text = "or" }), nilChecker, typeChecker })
			else
				args[1] = typeChecker
			end

			args[2] = parlist:cloneMeta("literal", { text = [["Parameter ']] .. var .. [[' must be a ]] .. type .. [["]] })
			
			table.insert(funcbody, i, tcnode)
		end

		if value then
			local as = parlist:cloneMeta("assignment")
			
			-- hack; should clone the value node first
			value.line = nil

			as[1] = as:cloneMeta("t_assignop", { text = "=" })
			as[2] = as:cloneMeta("identifier", { text = var })
			as[3] = as:cloneMeta("binop", { as:cloneMeta("t_binop", { text = "or" }), as[2], value })

			table.insert(funcbody, i, as)
		end
	end

	return parlist, funcbody
end

local luaBuffer = {}
luaBuffer.__index = luaBuffer
luaBuffer.__type = "luabuf"

function luaBuffer.new(indentString, nlString, noExtraSpace)
	return setmetatable({
		buf = {},
		indent = 0,
		indentString = indentString,
		nlString = nlString,
		noExtraSpace = noExtraSpace,

		line = 1
	}, luaBuffer)
end
function luaBuffer:appendln(t)
	self:append(t)
	self:nl()
end
function luaBuffer:append(t)
	if not self.hasIndented then
		self.buf[#self.buf + 1] = self.indentString:rep(self.indent)
		self.hasIndented = true
	end
	self.buf[#self.buf + 1] = t
end
function luaBuffer:nl()
	self.buf[#self.buf + 1] = self.nlString
	self.line += 1
	self.hasIndented = false
end
function luaBuffer:nlIndent()
	self:nl()
	self.indent += 1
end
function luaBuffer:nlUnindent()
	self:nl()
	self.indent -= 1
end

function luaBuffer:getTmpIndexAndIncrement()
	self._tmpIndex = (self._tmpIndex or -1) + 1
	return self._tmpIndex
end

-- Appends optional space. This might nop depending on the options 
function luaBuffer:appendSpace(t: string)
	if not self.noExtraSpace then
		self:append(t)
	end
end

-- makes sure that last node in luabuffer matches given pattern
function luaBuffer:checkLastNode(pattern: string)
	if local ln = self.buf[#self.buf] then
		return not not ln:match(pattern)
	end
end

function luaBuffer:tostring()
	return table.concat(self.buf, "")
end

function luafier.internalToLua(node: lunanode, opts, buf: luabuf)
	local function toLua(lnode)
		luafier.internalToLua(lnode, opts, buf)
	end
	local function listToLua(lnode)
		luafier.listToLua(lnode, opts, buf)
	end

	-- Gets the linenumber difference between these two nodes
	-- Returns nil if it cannot/shouldn't be derived from these nodes
	local function getLinenoDiff(node1, node2)
		if opts.matchLinenumbers then
			return luafier.getLinenoDiff(node1, node2)
		end
	end

	-- Adds indentation+nl/spaces around given block based on options
	-- n1 is preceding node
	-- n2 is the block node
	-- fn is the function that adds internal contents
	local function wrapIndent(n1, n2, fn, alsoIfPrettyPrint)
		local lndiff = getLinenoDiff(n1, n2)
		local addNl = lndiff or ((alsoIfPrettyPrint and opts.prettyPrint) and 1) or 0

		if addNl > 0 then
			buf:nlIndent()
			for i=1,addNl-1 do buf:nl() end
		else
			buf:appendSpace(" ")
		end

		fn()

		if addNl > 0 then
			buf:nlUnindent()
		else
			buf:append(" ")
		end
	end

	if node.type == "block" then
		local prevnode
		for i,snode ofi node do

			local lndiff = getLinenoDiff(buf.line, snode)
			if lndiff then
				if lndiff > 0 then
					for i=1,lndiff do buf:nl() end
				elseif lndiff == 0 then
					-- add newlines before all except first node if we're not ahead of ourselves
					if i > 1 then buf:nl() end
				end
			elseif opts.prettyPrint then
				-- add newlines before all except first node if we're prettyprinting
				if i > 1 then buf:nl() end
			end

			-- Add semicolon if there is something on line and there is no space/semicolon
			if buf.hasIndented and buf:checkLastNode("[^%s;]$") then
				buf:append(";")
			end

			toLua(snode)

			prevnode = snode
		end

	elseif node.type == "local" then
		buf:append("local ")
		toLua(node[1])
		if node[2] then -- has explist
			buf:append(" = ")
			toLua(node[2])
		end
		
	elseif node.type == "localdestructor" then
		local [destructor, target] = node
		local names = destructor[1]

		-- if target is not a simple identifier, create a tmp var for it
		local varName
 		if target.type == "identifier" then
			 varName = target.text
		else
			varName = "__ldestr" .. buf:getTmpIndexAndIncrement()
			buf:append("local "); buf:append(varName); buf:append("="); toLua(target); buf:append(";")
		end

		-- add assert to check we're not trying to destructure nil
		buf:append(LUAFN_ASSERT); buf:append("("); buf:append(varName); buf:append(", \"cannot destructure nil\");")

		buf:append("local ")
		for i,name ofi names do
			if i > 1 then buf:append(", ") end
			toLua(name)
		end
		buf:append(" = ")

		if destructor.type == "arraydestructor" then
			for i = 1, #names do
				if i > 1 then buf:append(", ") end
				buf:append(varName); buf:append("["); buf:append(tostring(i)); buf:append("]")
			end
		elseif destructor.type == "tabledestructor" then
			for i,member ofi names do
				if i > 1 then buf:append(", ") end
				buf:append(varName); buf:append("."); toLua(member)
			end
		end

	elseif node.type == "funcname" then
		local methodOffset = node.isMethod and -1 or 0
		for i = 1, #node + methodOffset do
			if i > 1 then buf:append(".") end
			toLua(node[i])
		end

		if node.isMethod then
			buf:append(":")
			toLua(node[#node])
		end
	elseif node.type == "localfunc" then
		buf:append("local function ")
		toLua(node[1])
		toLua(node[2])

	elseif node.type == "globalfunc" then
		buf:append("function ")
		toLua(node[1])
		toLua(node[2])

	elseif node.type == "func" then
		buf:append("function ")
		toLua(node[1])

	elseif node.type == "sfunc" or node.type == "funcbody" then
		local pl, fb = luafier.processParListFuncBlock(node[1], node[2])

		if node.type == "sfunc" then
			buf:append("function(")
		else
			buf:append("(")
		end
		listToLua(pl)
		buf:append(")")

		wrapIndent(pl, fb, function() toLua(fb) end, true)

		buf:append("end")
	elseif node.type == "assignment" then
		local op = node[1].text

		if op == "=" then
			toLua(node[2]); buf:append(" = "); toLua(node[3])
		elseif op == "||=" then
			assert(#node[3] == 1, "falsey assignment only works on 1-long explists currently")
			toLua(node[2]); buf:append(" = "); toLua(node[2]); buf:append(" or ("); toLua(node[3]); buf:append(")")
		else
			assert(#node[3] == 1, "mod assignment only works on 1-long explists currently")

			-- what kind of modification to do
			local modop = op:sub(1, 1)
			
			toLua(node[2]); buf:append(" = "); toLua(node[2]); buf:append(" "); buf:append(modop); buf:append(" ("); toLua(node[3]); buf:append(")")
		end
	elseif node.type == "funccall" then
		toLua(node[1]); buf:append("("); toLua(node[2]); buf:append(")")
	elseif node.type == "methodcall" then
		toLua(node[1]); buf:append(":"); toLua(node[2]); buf:append("("); toLua(node[3]); buf:append(")")

	elseif node.type == "args" or node.type == "fieldlist" or node.type == "parlist" or node.type == "typednamelist" or node.type == "varlist" or node.type == "explist" then
		listToLua(node)
		
	elseif node.type == "typedname" then
		toLua(node[1])
	elseif node.type == "paramwithvalue" then
		toLua(node[1])

	elseif node.type == "return" then
		buf:append("return")
		if local stat = node[1] then
			buf:append(" ")
			toLua(stat)
		end

	elseif node.type == "returnif" then
		local nif = node:cloneMeta("if")
		
		-- copy condition from returnif to if
		nif[1] = node[2]

		-- create return statement with returnif contents
		local ncond = node:cloneMeta("return")
		ncond[1] = node[1]
		nif[2] = ncond
		
		toLua(nif)

	elseif node.type == "break" then
		buf:append("break")

	elseif node.type == "index" then
		toLua(node[1]); buf:append("."); toLua(node[2])
	elseif node.type == "indexsafe" then
		buf:append("("); toLua(node[1]); buf:append(" and "); toLua(node[1]); buf:append("."); toLua(node[2]); buf:append(")")
	elseif node.type == "indexb" then
		toLua(node[1]); buf:append("["); toLua(node[2]); buf:append("]")

	elseif node.type == "tableconstructor" then
		buf:append("{");

		-- returns either first field of fieldlist or fieldlist itself
		local firstField = node[1][1] or node[1]

		-- need to use .line here, otherwise it gets the last line which doesn't work because firstField is child of node
		wrapIndent(node.line, firstField, function() toLua(node[1]) end)
		
		buf:append("}")
		
	elseif node.type == "field" then
		local [key, val] = node
		if key then
			if key.type == "identifier" then
				toLua(key)
			else
				buf:append("["); toLua(key); buf:append("]")
			end
			buf:appendSpace(" "); buf:append("="); buf:appendSpace(" "); toLua(val)
		else
			toLua(val)
		end

	elseif node.type == "ifassign" then
		-- Create a temporary variable name for the variable to be assigned before the if
		local origAssignedVarName = node[1][1][1][1].text -- ohgod
		local varName = "__ifa" .. buf:getTmpIndexAndIncrement() .. "_" .. origAssignedVarName

		-- Set the assignment variable name to generated name
		node[1][1][1][1].text = varName

		-- Create a new if block that checks if varName is trueish
		local varId = node:cloneMeta("identifier", { text = varName })
		local checkerIf = node:cloneMeta("if", { varId, node[2], node[3] })

		-- Create a new local binding to restore the old name within the if scope and set it as the first code within if
		local restoreBinding = node:cloneMeta("local", { node:cloneMeta("identifier", { text = origAssignedVarName }), varId })
		table.insert(checkerIf[2], 1, restoreBinding)

		toLua(node[1]); buf:append("; ") toLua(checkerIf)

	elseif node.type == "if" or node.type == "elseif" then
		buf:append(node.type); buf:append(" "); toLua(node[1]); buf:append(" then");
		
		wrapIndent(node, node[2], function()
			toLua(node[2])
		end, true)

		if node[3] then
			toLua(node[3])
		else
			buf:append("end")
		end
	elseif node.type == "else" then
		buf:append("else");
		wrapIndent(node, node[1], function()
			toLua(node[1])
		end, true)
		buf:append("end")

	elseif node.type == "while" then
		buf:append("while "); toLua(node[1]); buf:append(" do");
		wrapIndent(node, node[2], function()
			toLua(node[2])
		end, true)
		buf:append("end")
	elseif node.type == "repeat" then
		buf:append("repeat");
		wrapIndent(node, node[1], function()
			toLua(node[1])
		end, true)
		buf:append("until "); toLua(node[2])

	elseif node.type == "fornum" then
		local [var, low, high, step, b] = node
		buf:append("for "); toLua(var); buf:appendSpace(" "); buf:append("="); buf:appendSpace(" "); toLua(low); buf:append(","); buf:appendSpace(" "); toLua(high)
		if step then
			buf:append(","); buf:appendSpace(" ")
			toLua(step)
		end
		buf:append(" do");
		wrapIndent(var, b, function()
			toLua(b)
		end, true)
		buf:append("end")
	elseif node.type == "forgen" then
		local [names, iter, b] = node
		buf:append("for "); toLua(names); buf:append(" in "); toLua(iter); buf:append(" do");
		wrapIndent(iter, b, function()
			toLua(b)
		end, true)
		buf:append("end")
	elseif node.type == "forof" then
		local [var, iter, b] = node

		-- target collection can be nil, so we need to wrap the whole loop in an if
		if node.nillableColl then
			local nc = node:newCreator()

			-- create new variable for the collection; otherwise we might eval something twice
			local varName = "__lcoll" .. buf:getTmpIndexAndIncrement()
			toLua(nc["local"](nc.varlist(nc.typedname(varName)), nc.explist(iter))) buf:append(";")

			-- clone node and remove nillable flag, otherwise this block is called again
			local node2 = node:clone()
			node2.nillableColl = false

			-- modify the new for node's iterator to point to our newly made variable
			node2[2] = nc.identifier(() => do return varName, "text" end)

			local nif = nc["if"](
				varName,
				node2
			)
			toLua(nif)

			return
		end

		local [vark, varv] = var

		local destr
		if varv.type == "tabledestructor" or varv.type == "arraydestructor" then
			local varName = "__ldestr" .. buf:getTmpIndexAndIncrement()

			-- create a new identifier that will replace destructor
			local newVarv = varv:cloneMeta("identifier")
			newVarv.text = varName

			-- create a local destructor that targets newly named variable
			destr = varv:cloneMeta("localdestructor")
			destr[1] = varv
			destr[2] = newVarv

			varv = newVarv
		end

		buf:append("for ")
		if vark then
			toLua(vark)
		else
			buf:append("_")
		end
		buf:append(","); buf:appendSpace(" "); toLua(varv); buf:append(" in ")
		if node.iterArray then
			buf:append("ipairs")
		else
			buf:append("pairs")
		end
		buf:append("("); toLua(iter); buf:append(") do")

		wrapIndent(iter, b, function()
			if destr then toLua(destr) end
			toLua(b)
		end, true)
		buf:append("end")

	elseif node.type == "methodref" then
		buf:append("(function(...) return ");
		toLua(node[1]); buf:append(":"); toLua(node[2]); buf:append("(...)")
		buf:append(" end)")

	elseif node.type == "match" then
		local nc = node:newCreator()

		local varName = "__lmatch" .. buf:getTmpIndexAndIncrement()
		toLua(nc["local"](nc.varlist(nc.typedname(varName)), nc.explist(node[1]))) buf:append(";")

		local mainif
		local curif

		local mapCond = (cond) => do
			if cond.type == "identifier" and cond.text == "_" then
				return nc.keyword(() => do return "true", "text" end)
			elseif cond.type == "range" then
				local [low, high] = cond
				low = low and nc.binop(nc.t_binop(() => do return ">=", "text" end), varName, low)
				high = high and nc.binop(nc.t_binop(() => do return "<=", "text" end), varName, high)

				local e
				if low and high then
					e = nc.binop(nc.t_binop(() => do return "and", "text" end), low, high)
				elseif low then
					e = low
				else
					e = high
				end

				return nc.binop(nc.t_binop(() => do return "and", "text" end),
					nc.binop(nc.t_binop(() => do return "==", "text" end), nc.funccall("type", nc.args(nc.explist(varName))), nc.literal(() => do return "\"number\"", "text" end)),
					e)
			else
				return nc.binop(nc.t_binop(() => do return "==", "text" end), varName, cond)
			end
		end

		for [cond, body] ofi node[2] do
			if curif then
				local n = nc["elseif"](mapCond(cond), nc.block(body))
				curif[3] = n
				curif = n
			else
				mainif = nc["if"](mapCond(cond), nc.block(body))
				curif = mainif
			end
		end

		if mainif then
			toLua(mainif)
		end

	elseif node.type == "binop" then
		toLua(node[2]); buf:appendSpace(" "); buf:append(node[1].text);
		
		local lndiff = getLinenoDiff(node[2], node[3])

		if lndiff and lndiff > 0 then
			for i=1,lndiff do buf:nl() end
		else
			buf:appendSpace(" ")
		end
		toLua(node[3])

	elseif node.type == "unop" then
		local op = node[1].text
		buf:append(op)
		if op == "not" then
			buf:append(" ")
		end
		toLua(node[2])

	elseif node.type == "typecheck" then
		buf:append(LUAFN_TYPE); buf:append("("); toLua(node[1]); buf:append(")==\""); buf:append(node[2][1].text); buf:append("\"")

	elseif node.type == "parexp" then
		buf:append("("); toLua(node[1]); buf:append(")")

	elseif node.type == "identifier" or node.type == "keyword" then
		buf:append(node.text)
		
	elseif node.type == "literal" then
		buf:append(node.text)

	elseif node.type == "number" then
		buf:append(node.text)

	elseif node.type == "varargs" then
		buf:append("...")

	else
		error("unhandled ast node " .. node.type)
	end
end

local defopts = {
	-- attempts to create Lua that has same statements on same line numbers as source file
	matchLinenumbers = true,

	-- Tries to create as readable Lua as possible. If enabled alongside matchLinenumbers, it will be preferred over this option in stylistic decisions.
	prettyPrint = true,
	
	-- the indentation character (or string) that will be equal to one level of indentation in the output code
	indentString = "\t",

	-- the newline character that will be used for newlines in the output code
	nlString = "\n",
}

-- The code that is added as first thing in all Luafied files
local lunaInclusions = 
[[local ]] .. LUAFN_ASSERT .. [[,__L_to,__L_gmt=assert,type,getmetatable;]] ..
[[local function ]] .. LUAFN_TYPE .. [[(o)local t=__L_to(o) if t=="table" then local mt = __L_gmt(o)return (mt and mt.__type) or t end return t end]]

function luafier.toLua(node, useropts)
	local opts = {}

	for k,v of defopts do opts[k] = v end
	for k,v of? useropts do opts[k] = v end

	local bufIndentString = opts.prettyPrint and opts.indentString or ""

	local buf = luaBuffer.new(bufIndentString, opts.nlString, not opts.prettyPrint)
	buf:append(lunaInclusions); buf:append(";")

	luafier.internalToLua(node, opts, buf)
	return buf:tostring()
end

return luafier