local unpack = unpack or table.unpack -- Lua 5.3 support
local gettype = type

local Parser = {}
Parser.__index = Parser

function Parser.new(lexer)
	local p = setmetatable({
		lexer = lexer,
		tokens = {},
		tokenIndex = 0
	}, Parser)
	p:next()
	return p
end

function Parser:isEOF()
	return not self.nextToken
end

function Parser:next()
	self.curToken = self.tokens[self.tokenIndex]
	
	self.nextToken = self.tokens[self.tokenIndex + 1]
	if not self.nextToken then
		local nt = self.lexer:next()
		if nt then
			self.tokens[self.tokenIndex + 1] = nt
			self.nextToken = nt
		end
	end
	
	self.tokenIndex += 1
	return self.curToken
end

function Parser:_createRestorePoint()
	local point = self.tokenIndex
	return () => do
		self.tokenIndex = point - 1
		self:next()
	end
end

function Parser:error(text: string)
	local line, col = self.nextToken?.line or -1, self.nextToken?.col or -1

	text = text .. " preceding tokens: "
	for i=2,0,-1 do
		local t = self.tokens[self.tokenIndex - 1 - i]
		if t then text = text .. " [" .. t.type .. ":" .. t.text .. "]" end
	end

	error("[Luna Parser] " .. text .. " at line " .. line .. " col " .. col)
end
function Parser:expectedError(expected: string)
	local t = string.format("expected %s, got %s", expected, self.nextToken?.type)
	return self:error(t)
end

local node_meta = {}
node_meta.__index = node_meta
node_meta.__type = "lunanode"

function node_meta:cloneMeta(newType: string, merget: table?)
	local cloned = setmetatable({ type = newType, line = self.line, col = self.col }, node_meta)
	if merget then
		for k,v in pairs(merget) do cloned[k] = v end
	end
	return cloned
end
function node_meta:clone(merget: table?)
	local cloned = setmetatable({}, node_meta)
	for k,v in pairs(self) do cloned[k] = v end
	if merget then
		for k,v in pairs(merget) do cloned[k] = v end
	end
	return cloned
end

function Parser:node(type: string, ...)
	local n = setmetatable({ type = type, line = self.curToken?.line, col = self.curToken?.col}, node_meta)

	local args = {...}

	-- if first argument is a AST node, copy the line number from it as automatically guessed numbers are in some cases
	-- too far ahead. TODO this is kind of undocumented behavior
	if gettype(args[1]) == "table" and args[1].type then
		n.line = args[1].line
	end

	for i,v in pairs(args) do
		n[i] = v
	end

	return n
end

-- Creates a nodecreator thing that allows creating ast trees easily. Strings are converted to identifiers
-- Eg.
-- local nc = self:nodeCreator(baseNode)
-- local tree = nc.funccall("hello", nc.args(""))
local nodecreator_meta = {}
local nodecreator_node_meta = {
	__call = function(t, ...)
		local n = t.n
		for i,c in ipairs{...} do
			if c is string then
				local str = c
				c = n:cloneMeta("identifier")
				c.text = str
			elseif type(c) == "function" then
				c = c()
			end

			n[i] = c
		end
		return n
	end
}

nodecreator_meta.__index = function(self, name)
	local n = rawget(self, "base"):cloneMeta(name)
	return setmetatable({n = n}, nodecreator_node_meta)
end
function Parser:nodeCreator(base)
	return setmetatable({ base = base }, nodecreator_meta)
end

function Parser:token2node(token: lunatoken?)
	return nil if not token

	local n = self:node(token.type)
	n.text, n.line, n.col = token.text, token.line, token.col
	return n
end
function Parser:accept(type: string, text: string?)
	if self.nextToken?.type == type and (not text or self.nextToken.text == text) then
		return self:next()
	end
end
function Parser:expect(type: string, text: string)
	local n = self:accept(type, text)
	return self:error("expected " .. type) if not n
	
	return n
end
function Parser:checkEOF(text: string)
	return self:error(text) if not self:isEOF()
end


function Parser:acceptChain(fn: function, ...)
	local rp = self:_createRestorePoint()

	local line, col = self.nextToken?.line, self.nextToken?.col

	local t = {}
	for i,node in pairs{...} do
		local parsed
		if type(node) == "table" then
			parsed = self:accept(node[1], node[2])
		else
			local nfn = self[node]
			if not nfn then
				error("PARSER ERROR! Inexistent node name: " .. tostring(node))
			end

			parsed = nfn(self)
			-- todo should catch errors?
			--[[local r, e = pcall(self[node], self)
			if r then
				parsed = e
			else
				print(node, e)
			end]]
		end

		-- could not parse given chain part; restore
		if not parsed then
			rp()
			return
		end

		t[i] = parsed
	end

	local ret = {fn(unpack(t))}

	-- if chain results into a node, it should obviously be positioned at beginning of chain, which is done here
	if gettype(ret[1]) == "table" and ret[1].type then
		ret[1].line = line
		ret[1].col = col
	end

	return unpack(ret)
end

local chain_meta = {}
chain_meta.__index = chain_meta

function chain_meta:insertParserFn(expected: boolean, fn: function, name: string?)
	table.insert(self.chain, { name = name or "unknown", expected = expected, fn = fn })
	return self
end
function chain_meta:insertToken(expected: boolean, type: string, text: string?)
	table.insert(self.chain, { name = type, expected = expected, fn = () => self.parser:accept(type, text) })
	return self
end
function chain_meta:accept(a, b)
	return self:insertParserFn(false, a, b) if type(a) == "function"
	return self:insertToken(false, a, b)
end
function chain_meta:expect(a, b)
	return self:insertParserFn(true, a, b) if type(a) == "function"
	return self:insertToken(true, a, b)
end

function chain_meta:done(fn: function)
	local parser = self.parser
	
	local rp = parser:_createRestorePoint()
	local line, col = parser.nextToken?.line, parser.nextToken?.col
	
	local t = {}
	for i, ch in ipairs(self.chain) do
		local {name, expected, fn} = ch
		local parsed = fn()

		-- could not parse given chain part; restore
		if not parsed then
			if expected then
				parser:expectedError(name)
			end

			rp()
			return
		end

		t[i] = parsed
	end

	local ret = {fn(unpack(t))}

	-- if chain results into a node, it should obviously be positioned at beginning of chain, which is done here
	if ret[1] and type(ret[1]) == "table" and ret[1].type then
		ret[1].line = line
		ret[1].col = col
	end

	return unpack(ret)
end

-- Creates a new chain
-- Chains are parser combinators of Luna parser and allow checking for a chain of nodes/tokens
function Parser:chain(name: string)
	return setmetatable({name = name, parser = self, chain = {}}, chain_meta)
end

function Parser:block()
	local block = self:node("block")

	-- block position should start from next token
	block.line = self.nextToken.line
	block.col = self.nextToken.col

	local finished = false

	while true do
		local stat = self:stat()

		if not stat then

			local endkw =
				self:accept("keyword", "end") or
				self:accept("keyword", "elseif") or
				self:accept("keyword", "else") or
				self:accept("keyword", "until")

			if endkw then
				finished = true
				block.endkw = endkw.text
			end

			break
		end

		table.insert(block, stat)
	end

	if not finished and not self:isEOF() then
		local post = "got " .. (self.nextToken and (self.nextToken.type .. " " .. self.nextToken.text)) .. " "
		self:error("expected statement; " .. post)
	end

	return block
end

function Parser:stat()
	local function assignment(varlist, op, explist)
		return self:node("assignment", op.text, varlist, explist)
	end
	local function fnstmt(_, name, body)
		return self:node("globalfunc", name, body)
	end
	local function localfnstmt(_, _, name, body)
		return self:node("localfunc", name, body)
	end

	self:accept("symbol", ";") -- accept semicolon if there is one

	return
		self:acceptChain(assignment, "varlist", {"assignop"}, "explist") or
		self:stat_while() or
		self:stat_if() or
		self:stat_for() or
		self:acceptChain(fnstmt, {"keyword", "function"}, "funcname", "funcbody") or
		self:acceptChain(localfnstmt, {"keyword", "local"}, {"keyword", "function"}, "name", "funcbody") or
		self:stat_local() or
		self:primaryexp() or

		self:laststat()
end
function Parser:stat_while()
	return
		self:acceptChain((_, cond, _, b) => self:node("while", cond, b), {"keyword", "while"}, "exp", {"keyword", "do"}, "block") or
		self:acceptChain((_, b, cond) => self:node("repeat", b, cond), {"keyword", "repeat"}, "block", "exp")
end
function Parser:stat_if()
	local _else, _elseif

	local function cont(b, node)
		if b.endkw == "elseif" then
			table.insert(node, _elseif())
		elseif b.endkw == "else" then
			table.insert(node, _else())
		end
	end

	function _else()
		local b = self:block()
		if not b then self:error("expected else block") end
		return self:node("else", b)
	end
	function _elseif()
		local cond, b =
			self:acceptChain((e,_,b) => do return e, b end, "exp", {"keyword", "then"}, "block")
		if not b then self:error("expected elseif condition or block") end

		local node = self:node("elseif", cond, b)
		cont(b, node)
		return node
	end

	local function normalif(_,cond,_,b)
		local node = self:node("if", cond, b)
		cont(b, node)
		return node
	end

	local function assignif(_,assign,_,b)
		if #assign[1] ~= 1 or #assign[2] ~= 1 then
			self:error("If-Assign must have exactly one assigned variable")
		end

		local node = self:node("ifassign", assign, b)
		cont(b, node)
		return node
	end

	return
		self:acceptChain(normalif, {"keyword", "if"}, "exp", {"keyword", "then"}, "block") or
		self:acceptChain(assignif, {"keyword", "if"}, "stat_local", {"keyword", "then"}, "block")
end
function Parser:stat_for()
	local function fornum(_,var,_,low,_,high,_,b)
		return self:node("fornum", var, low, high, nil, b)
	end
	local function fornum_step(_,var,_,low,_,high,_,step,_,b)
		return self:node("fornum", var, low, high, step, b)
	end
	local function forgen(_,names,_,iter,_,b)
		return self:node("forgen", names, iter, b)
	end
	local function forof(_,var,_,iter,_,b)
		return self:node("forof", var, iter, b)
	end

	return
		self:acceptChain(fornum_step, {"keyword", "for"}, "name", {"assignop", "="}, "exp", {"symbol", ","}, "exp", {"symbol", ","}, "exp", {"keyword", "do"}, "block") or
		self:acceptChain(fornum, {"keyword", "for"}, "name", {"assignop", "="}, "exp", {"symbol", ","}, "exp", {"keyword", "do"}, "block") or
		self:acceptChain(forgen, {"keyword", "for"}, "typednamelist", {"keyword", "in"}, "exp", {"keyword", "do"}, "block") or
		self:acceptChain(forof, {"keyword", "for"}, "for_var", {"identifier", "of"} --[[TODO make 'of' a keyword?]], "exp", {"keyword", "do"}, "block")
end
function Parser:for_var()
	return self:name() or self:destructor()
end
function Parser:stat_local()
	local function localstmt(_, namelist)
		local explist
		if self:accept("assignop", "=") then
			explist = self:explist()
			if not explist then self:error("expected explist") end
		end

		return self:node("local", namelist, explist)
	end
	local function localdestr(_, destructor, _, target)
		return self:node("localdestructor", destructor, target)
	end

	return
		self:acceptChain(localdestr, {"keyword", "local"}, "destructor", {"assignop", "="}, "exp") or
		self:acceptChain(localstmt, {"keyword", "local"}, "typednamelist")
end

function Parser:destructor()
	local function destruct_array(_, namelist)
		return self:node("arraydestructor", namelist)
	end
	local function destruct_table(_, namelist)
		return self:node("tabledestructor", namelist)
	end

	return
		self:acceptChain(destruct_array, {"symbol", "["}, "typednamelist", {"symbol", "]"}) or
		self:acceptChain(destruct_table, {"symbol", "{"}, "typednamelist", {"symbol", "}"})
end

function Parser:laststat()
	return
		self:acceptChain((_,e,_,c) => self:node("returnif", e, c), {"keyword", "return"}, "explist", {"keyword", "if"}, "exp") or
		self:acceptChain((_,e) => self:node("return", e), {"keyword", "return"}, "explist") or
		self:acceptChain(() => self:node("break"), {"keyword", "break"})
end

function Parser:funcname()
	local namebuf = self:node("funcname")

	local name = self:name()
	return if not name

	namebuf[1] = name

	while self:accept("symbol", ".") do
		name = self:name()
		if not name then self:error("funcname terminates abruptly") end
		table.insert(namebuf, name)
	end

	if self:accept("symbol", ":") then
		name = self:name()
		if not name then self:error("funcname terminates abruptly") end
		table.insert(namebuf, name)

		namebuf.isMethod = true
	end

	return namebuf
end

function Parser:varlist()
	local vars = self:node("varlist")

	local var = self:primaryexp()
	while var do
		table.insert(vars, var)
		if self:accept("symbol", ",") then
			var = self:primaryexp()
		else
			var = nil
		end
	end

	return vars
end

function Parser:name()
	return self:token2node(self:accept("identifier"))
end

function Parser:typedname()
	if local i = self:name() then
		return self:node("typedname", i, self:type())
	end
end

function Parser:type()
	if self:accept("symbol", ":") then
		-- function is an unfortunate keyword, but we want it to be valid type name; thus this hack
		local n = self:name() or self:token2node(self:accept("keyword", "function"))
		return if not n

		local isOptional = self:accept("symbol", "?")
		return self:node("type", n, not not isOptional)
	end
end

function Parser:typednamelist()
	local names = self:node("typednamelist")

	local name = self:typedname()
	while name do
		table.insert(names, name)
		if self:accept("symbol", ",") then
			name = self:typedname()
		else
			name = nil
		end
	end

	return names
end

function Parser:explist()
	local exps = self:node("explist")

	local exp = self:exp()
	while exp do
		table.insert(exps, exp)
		if self:accept("symbol", ",") then
			exp = self:exp()
		else
			exp = nil
		end
	end

	return exps
end

function Parser:macroinvocation(prefix)
	local function expandMethodMacro(name, args)
		if name.text == "map" then
			local nargs = args:cloneMeta("args")
			nargs[1] = prefix
			for i=1,#args do nargs[1 + i] = args[i] end

			return self:macroexpand_map(nargs)
		else
			self:error("unknown macro name '" .. name.text .. "'")
		end
	end

	return
		self:acceptChain((_, nm, _, a) => expandMethodMacro(nm, a), {"symbol", ":"}, "name", {"symbol", "!"}, "args")
end
function Parser:macroexpand_map(args)
	local nc = self:nodeCreator(args)

	local sourceTable = args[1]
	local cfunc = args[2][1]

	local [cpars, cbody] = cfunc

	-- gets rid of return statement if present
	if cbody.type == "return" then
		cbody = cbody[1]
	end

	local cparFirstName = cpars[1][1].text
	local function rewriteIdentifiers(n)
		if n is lunanode then
			for _,v in pairs(n) do
				rewriteIdentifiers(v)
			end

			if n.type == "identifier" and n.text == cparFirstName then
				n.text = "v"
			end
		end
	end

	rewriteIdentifiers(cbody)

	local mm =
		nc.parexp(nc.funccall(
			nc.parexp(
				nc.func(nc.funcbody(
					nc.parlist(nc.typedname("t")),
					nc.block(
						nc["local"](nc.typedname("nt"),nc.explist(nc.tableconstructor(nc.fieldlist()))),
						nc.forgen(
							nc.typednamelist(nc.typedname("k"), nc.typedname("v")),
							nc.funccall("pairs", nc.args(nc.explist("t"))),
							nc.block(
								nc.assignment(
									() => "=",
									nc.varlist(nc.indexb("nt", "k")),
									nc.explist(
										cbody
									)
								)
							)
						),
						nc["return"]("nt")
					)
				)),
			),
			nc.args(nc.explist(sourceTable:clone({ line = args.line })))
		))
	return mm
end

function Parser:primaryexp()
	local pref = self:prefixexp()
	return if not pref

	local n = pref

	while true do
		-- check if there's repeating expressions (func call, method call, index)
		local nn =
			self:acceptChain((_, nm) => self:node("index", n, nm), {"symbol", "."}, "name") or
			self:acceptChain((_, _, nm) => self:node("indexsafe", n, nm), {"symbol", "?"}, {"symbol", "."}, "name") or
			self:acceptChain((_, e) => self:node("indexb", n, e), {"symbol", "["}, "exp", {"symbol", "]"}) or
			self:acceptChain((_, nm, a) => self:node("methodcall", n, nm, a), {"symbol", ":"}, "name", "args") or
			self:acceptChain((a) => self:node("funccall", n, a), "args") or
			self:macroinvocation(n)
		
		if not nn then

			-- check if there are any expressions that can end a primaryexp
			local pend =
				self:acceptChain((_, _, nm) => self:node("methodref", n, nm), {"symbol", ":"}, {"symbol", ":"}, "name")

			return pend or n
		end

		n = nn
	end
end

function Parser:simpleexp()
	-- check if it's a short function
	local shortFn = self:chain("shortfunc")
		:accept("symbol", "("):accept(self::parlist, "parameters"):accept("symbol", ")"):accept("symbol", "=>")
		:expect(self::sfuncbody, "function body")
		:done((_,p,_,_,b) => self:node("sfunc", p, b))
	return shortFn if shortFn

	return
		self:token2node(self:accept("keyword", "nil")) or
		self:token2node(self:accept("keyword", "false")) or
		self:token2node(self:accept("keyword", "true")) or
		self:token2node(self:accept("number")) or
		self:token2node(self:accept("literal")) or
		self:varargs() or
		self:func() or
		self:tableconstructor() or
		self:primaryexp()
end

function Parser:subexp()
	local unop = self:accept("unop") or self:accept("binop", "-")
	return self:node("unop", unop.text, self:subexp()) if unop

	local e = self:simpleexp()

	if e then
		-- check if exp is directly followed by binary operator
		if local b = self:accept("binop") then
			local e2 = self:subexp()
			if not e2 then
				self:error("expected right side of binop")
			end

			local node = self:node("binop", b.text, e, e2)
			node.line = e.line
			node.col = e.col
			return node
		end

		-- check if it's a type check
		if local check = self:chain("typecheck"):accept("identifier", "is"):expect("identifier"):done((_, typename) => typename) then
			return self:node("typecheck", e, check)
		end
	end
	
	return e
end

function Parser:exp()
	return self:subexp()
end

function Parser:prefixexp()
	return
		self:name() or
		self:acceptChain((_,e,_) => self:node("parexp", e), {"symbol", "("}, "exp", {"symbol", ")"})
end

function Parser:args()
	return
		self:acceptChain((_,el) => self:node("args", el), {"symbol", "("}, "explist", {"symbol", ")"}) or
		self:acceptChain((tbl) => self:node("args", self:node("explist", tbl)), "tableconstructor")
end

function Parser:func()
	return
		self:acceptChain((_, f) => self:node("func", f), {"keyword", "function"}, "funcbody")
end

function Parser:funcbody()
	return
		self:acceptChain((_, p, _, b) => self:node("funcbody", p, b), {"symbol", "("}, "parlist", {"symbol", ")"}, "block")
end

function Parser:varargs()
	return self:node("varargs") if self:accept("symbol", "...")
end

function Parser:parlist()
	local params = self:node("parlist")

	local function nextarg()
		if local n = self:typedname() then
			-- check if default value is specified
			if local value = self:chain("default value"):accept("assignop", "="):expect(self::exp):done((_, e) => e) then
				return self:node("paramwithvalue", n, value)
			end
			return n
		end

		-- try to match varargs
		return self:varargs()
	end

	if local param = nextarg() then

		-- has varargs been added to parlist
		local vargsAdded = false

		repeat
			if vargsAdded then
				error("Varargs must be the last element in a parameter list")
			end

			table.insert(params, param)

			if param.type == "varargs" then
				vargsAdded = true
			end

			if self:accept("symbol", ",") then
				param = nextarg()
			else
				param = nil
			end
		until not param
	end

	return params
end

function Parser:tableconstructor()
	return
		self:acceptChain((_,fl) => self:node("tableconstructor", fl), {"symbol", "{"}, "fieldlist", {"symbol", "}"})
end

function Parser:fieldlist()
	local fields = self:node("fieldlist")

	local field = self:field()
	while field do
		table.insert(fields, field)
		if self:fieldsep() then
			field = self:field()
		else
			field = nil
		end
	end

	return fields
end

function Parser:field()
	return
		self:acceptChain((_, n, _, _,e) => self:node("field", self:token2node(n), e), {"symbol", "["}, {"literal"}, {"symbol", "]"}, {"assignop", "="}, "exp") or
		self:acceptChain((n,_,e) => self:node("field", n, e), "name", {"assignop", "="}, "exp") or
		self:acceptChain((e) => self:node("field", nil, e), "exp")
end
function Parser:fieldsep()
	return self:accept("symbol", ",") or self:accept("symbol", ";")
end

-- Body of a short hand function
-- Can be single exp or a block
function Parser:sfuncbody()
	return
		self:acceptChain((_, b) => b, {"keyword", "do"}, "block") or
		self:acceptChain((e) => self:node("return", e), "exp")
end

return Parser